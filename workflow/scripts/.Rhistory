?collapseNoMismatch
?assignTaxonomy
suppressMessages(library("optparse"))
suppressMessages(library("magrittr"))
suppressMessages(library("dada2"))
opt = NULL
opt$input = "/Users/khaled/Desktop/v13_V45/favabean/run1-V13/dada2_DADA2Errors-R1.RData"
cores = 5
rDirection = "R1"
load(opt$input)
dadaDenoised = dada(theFiles, err=DADA2errors, multithread=cores, pool=TRUE, verbose=TRUE)
theFiles
theFiles = list.files("~/Desktop/v13_V45/favabean/run1-V13/dada2/filtered/")
dadaDenoised = dada(theFiles, err=DADA2errors, multithread=cores, pool=TRUE, verbose=TRUE)
theFiles
theFiles = list.files("~/Desktop/v13_V45/favabean/run1-V13/dada2/filtered/",full.names = TRUE)
theFiles
dadaDenoised = dada(theFiles, err=DADA2errors, multithread=cores, pool=TRUE, verbose=TRUE)
?dada
?learnErrors
suppressMessages(library("optparse"))
suppressMessages(library("readr"))
suppressMessages(library("tidyr"))
suppressMessages(library("magrittr"))
suppressMessages(library("dada2"))
R1denoised = "~/Desktop/v13_V45/favabean/run1-V13/dada2_DADA2Denoise-R1.RData"
R2denoised = "~/Desktop/v13_V45/favabean/run1-V13/dada2_DADA2Denoise-R2.RData"
load(R1denoised)
dadaFs = dadaDenoised
filtFs = theFiles
rm(theFiles, dadaDenoised)
load(R2denoised)
dadaRs = dadaDenoised
filtRs = theFiles
rm(theFiles, dadaDenoised)
filtFs
strsplit(filtFs,"data/")
strsplit(filtFs,"data/") %>% unlist(.)
?strsplit()
?grep
base::sub("data/","~/Desktop/v13_V45/",filtFs)
filtFs = base::sub("data/","~/Desktop/v13_V45/",filtFs)
filtRs = base::sub("data/","~/Desktop/v13_V45/",filtRs)
mergers = mergePairs(dadaFs, filtFs, dadaRs, filtRs, verbose=TRUE)
seqtab = makeSequenceTable(mergers)
View(seqtab)
suppressMessages(library("optparse"))
suppressMessages(library("readr"))
suppressMessages(library("tidyr"))
suppressMessages(library("magrittr"))
suppressMessages(library("dada2"))
load(R1denoised)
R1denoised = "~/Desktop/v13_V45/favabean/run1-V13/dada2_DADA2Denoise-R1.RData"
load(R1denoised)
dadaFs = dadaDenoised
filtFs = theFiles
rm(theFiles, dadaDenoised)
R2denoised = "~/Desktop/v13_V45/favabean/run1-V13/dada2_DADA2Denoise-R2.RData"
load(R2denoised)
dadaRs = dadaDenoised
filtRs = theFiles
rm(theFiles, dadaDenoised)
filtFs = base::sub("data/","~/Desktop/v13_V45/",filtFs)
filtRs = base::sub("data/","~/Desktop/v13_V45/",filtRs)
print("Samples merging to beginâ€¦")
mergers = mergePairs(dadaFs, filtFs, dadaRs, filtRs, verbose=TRUE)
seqtab = makeSequenceTable(mergers)
View(seqtab)
seqtab = as.data.frame(cbind(rownames(seqtab),seqtab))
View(seqtab)
write_tsv(seqtab,"~/Desktop//seqtab.tsv"),col_names=FALSE)
write_tsv(seqtab,"~/Desktop/seqtab.tsv"),col_names=FALSE)
write_tsv(seqtab,"~/Desktop/seqtab.tsv",col_names=FALSE)
seqtab = makeSequenceTable(mergers)
seqtab = as.data.frame(cbind(rownames(seqtab),seqtab)) %>% rbind(colnames(.),.)
View(seqtab)
mergers = mergePairs(dadaFs, filtFs, dadaRs, filtRs, verbose=TRUE)
write_tsv(seqtab,"~/Desktop/seqtab.tsv",col_names=FALSE)
write_tsv(seqtab,"~/Desktop/seqtab.tsv",col_names=TRUE)
load("~/Desktop/v13_V45/favabean/V45_chimeraRemoved.RObjects")
condensed_table = collapseNoMismatch(inputfile4, minOverlap = 20, orderBy = "abundance", identicalOnly = FALSE, vec = TRUE, band = -1, verbose = TRUE)
suppressMessages(library("optparse"))
suppressMessages(library("readr"))
suppressMessages(library("tidyr"))
suppressMessages(library("magrittr"))
suppressMessages(library("dada2"))
condensed_table = collapseNoMismatch(inputfile4, minOverlap = 20, orderBy = "abundance", identicalOnly = FALSE, vec = TRUE, band = -1, verbose = TRUE)
suppressMessages(library("optparse"))
suppressMessages(library("readr"))
suppressMessages(library("tidyr"))
suppressMessages(library("magrittr"))
suppressMessages(library("dada2"))
?dada2::assignTaxonom
??dada2::assignTaxonomy
inputFile = "~/Desktop/v13_V45/favabean/V13_condense.tsv"
suppressMessages(library("optparse"))
suppressMessages(library("readr"))
suppressMessages(library("tidyr"))
suppressMessages(library("magrittr"))
suppressMessages(library("dada2"))
suppressMessages(library("tictoc"))
myDatabase = "~/Desktop/v13_V45/resources/eHOMD_ref.fa.gz"
mySpecies = "~/Desktop/v13_V45/resources/eHOMD_species.fa.gz"
myCores = 10
inputMatrix = read_tsv(inputFile) %>% as.data.frame(.)
View(inputMatrix)
?read_tsv
inputMatrix = inputMatrix[-1,]
inputMatrix = read_tsv(inputFile) %>% as.data.frame(.)
inputMatrix = inputMatrix[-1,]
inputMatrix = read_tsv(inputFile)
inputFile = "~/Desktop/v13_V45/favabean/V13_chimeraRemoved.RObjects"
cores = 10
load(inputFile)
tic()
condensed_table = collapseNoMismatch(inputfile4, minOverlap = 20, orderBy = "abundance", identicalOnly = FALSE, vec = TRUE, band = -1, verbose = TRUE)
inputFile = "~/Desktop/v13_V45/favabean/V45_chimeraRemoved.RObjects"
cores = 10
load(inputFile)
tic()
condensed_table = collapseNoMismatch(inputfile4, minOverlap = 20, orderBy = "abundance", identicalOnly = FALSE, vec = TRUE, band = -1, verbose = TRUE)
toc()
View(condensed_table)
SampleIDs = rownames(condensed_table)
condensed_table = as.data.frame(condensed_table)
condensed_table = cbind(SampleIDs,condensed_table)
condensed_table = t(condensed_table) %>% as.data.frame(.)
?write_tsv
condensed_table = cbind(rownames(condensed_table),condensed_table)
write_tsv(condensed_table,opt$output,col_names = FALSE)
opt = NULL
suppressMessages(library("optparse"))
suppressMessages(library("readr"))
suppressMessages(library("tidyr"))
suppressMessages(library("magrittr"))
suppressMessages(library("dada2"))
suppressMessages(library("tictoc"))
inputFile = "~/Desktop/v13_V45/favabean/V45_condense.tsv"
myDatabase = "~/Desktop/v13_V45/resources/eHOMD_ref.fa.gz"
mySpecie = "~/Desktop/v13_V45/resources/eHOMD_species.fa.gz"
myCores = 10
inputMatrix = read_tsv(inputFile) %>% as.data.frame(.)
View(inputMatrix)
colnames(inputMatrix)[1] = ""
ASVs = colnames(inputMatrix)[-1]
ASVs
ASVs = rownames(inputMatrix)[-1]
ASVs
inputMatrix = read_tsv(inputFile) %>% as.data.frame(.)
ASVs = inputMatrix$SampleIDs
ASVs
tic()
taxa3 = dada2::assignTaxonomy(ASVs, myDatabase,verbose=TRUE, tryRC = TRUE, multithread = FALSE)
toc()
mySpecies = mySpecie
tic()
taxa4 = dada2::assignSpecies(taxa3,mySpecies,tryRC = TRUE)
toc()
taxa5 = dplyr::left_join(taxa3,taxa4)
taxa3 = cbind(rownames(taxa3),taxa3) %>% as.data.frame(.)
taxa4 = cbind(rownames(taxa4),taxa4) %>% as.data.frame(.)
taxa5 = dplyr::left_join(taxa3,taxa4)
taxa5[is.na(taxa5)] = ""
taxonomy = paste0("k__",taxa5$Kingdom,"; p__",taxa5$Phylum,"; c__",taxa5$Class,"; o__",taxa5$Order,"; f__",taxa5$Family,"; g__",taxa5$Genus,"; s__",taxa5$Species)
colnames(inputMatrix) = inputMatrix[1,]
inputMatrix = read_tsv(inputFile) %>% as.data.frame(.)
inputMatrix2 = inputMatrix[-1,]
View(inputMatrix2)
inputMatrix2 = cbind(inputMatrix,taxonomy)
OTU_IDs = rownames(inputMatrix2)
OTU_DSs
OTU_IDs
inputMatrix = read_tsv(inputFile) %>% as.data.frame(.)
ASVs = inputMatrix$SampleIDs
tic()
taxa3 = dada2::assignTaxonomy(ASVs, myDatabase,verbose=TRUE, tryRC = TRUE, multithread = FALSE)
toc()
print("Taxonomy assignment up to genus level is completed.")
tic()
taxa4 = dada2::assignSpecies(taxa3,mySpecies,tryRC = TRUE)
toc()
print("Taxonomy assignment up to species level is completed.")
taxa3 = cbind(rownames(taxa3),taxa3) %>% as.data.frame(.)
taxa4 = cbind(rownames(taxa4),taxa4) %>% as.data.frame(.)
View(taxa4)
View(taxa5)
taxa5 = dplyr::left_join(taxa3,taxa4)
View(taxa3)
taxa5[is.na(taxa5)]
taxa5[is.na(taxa5)] = ""
taxonomy = paste0("k__",taxa5$Kingdom,"; p__",taxa5$Phylum,"; c__",taxa5$Class,"; o__",taxa5$Order,"; f__",taxa5$Family,"; g__",taxa5$Genus,"; s__",taxa5$Species)
taxonomy
inputMatrix2 = cbind(inputMatrix,taxonomy)
View(inputMatrix2)
inputMatrix2$taxonomy
OTU_IDs = rownames(inputMatrix2)
OTU_IDs
inputMatrix3 = cbind(paste0("OTU",OTU_IDs),inputMatrix3)
inputMatrix3 = cbind(paste0("OTU",OTU_IDs),inputMatrix2)
View(inputMatrix3)
inputMatrix3[1,1]
colnames(inputMatrix3)[1]
colnames(inputMatrix3)[1] = "#SampleID"
taxonomy = data.frame(Sequences = inputMatrix3$SampleIDs, Taxonomy = inputMatrix3$taxonomy ,OTU_ID = inputMatrix3$`#SampleID`)
View(taxonomy)
taxonomy = data.frame(OTU_ID = inputMatrix3$`#SampleID`, Sequences = inputMatrix3$SampleIDs, Taxonomy = inputMatrix3$taxonomy)
colnames(inputMatrix3)
inputMatrix3 = inputMatrix3 %>% .[,-which(colnames(.) %in% c("SampleIDs","taxonomy"))]
suppressMessages(library("optparse"))
suppressMessages(library("readr"))
suppressMessages(library("tidyr"))
suppressMessages(library("magrittr"))
suppressMessages(library("dada2"))
suppressMessages(library("tictoc"))
inputFile = "~/Desktop/v13_V45/favabean/V45_condense.tsv"
myDatabase = "~/Desktop/v13_V45/resources/eHOMD_ref.fa.gz"
mySpecies = "~/Desktop/v13_V45/resources/eHOMD_species.fa.gz"
myCores = 10
myOutput = "~/Desktop/test.tsv"
taxonomyOutput = "~/Desktop/taxonomy.tsv"
inputMatrix = read_tsv(inputFile) %>% as.data.frame(.)
ASVs = inputMatrix$SampleIDs
tic()
print("Beginning assignment up to genus level.")
taxa3 = dada2::assignTaxonomy(ASVs, myDatabase,verbose=TRUE, tryRC = TRUE, multithread = FALSE)
toc()
print("Taxonomy assignment up to genus level is completed.")
tic()
print("Beginning assignment up to species level.")
taxa4 = dada2::assignSpecies(taxa3,mySpecies,tryRC = TRUE)
toc()
print("Taxonomy assignment up to species level is completed.")
taxa3 = cbind(rownames(taxa3),taxa3) %>% as.data.frame(.)
taxa4 = cbind(rownames(taxa4),taxa4) %>% as.data.frame(.)
taxa5 = dplyr::left_join(taxa3,taxa4)
taxa5[is.na(taxa5)] = ""
taxonomy = paste0("k__",taxa5$Kingdom,"; p__",taxa5$Phylum,"; c__",taxa5$Class,"; o__",taxa5$Order,"; f__",taxa5$Family,"; g__",taxa5$Genus,"; s__",taxa5$Species)
View(taxa3)
View(taxa4)
inputMatrix2 = cbind(inputMatrix,taxonomy)
OTU_IDs = rownames(inputMatrix2)
inputMatrix3 = cbind(paste0("OTU",OTU_IDs),inputMatrix2)
taxonomy = data.frame(OTU_ID = inputMatrix3$`#SampleID`, Sequences = inputMatrix3$SampleIDs, Taxonomy = inputMatrix3$taxonomy)
taxonomy = data.frame(OTU_ID = inputMatrix3$`#SampleID`, Sequences = inputMatrix3$SampleIDs, Taxonomy = inputMatrix3$taxonomy)
View(inputMatrix3)
colnames(inputMatrix3)[1] = "#SampleID"
taxonomy = data.frame(OTU_ID = inputMatrix3$`#SampleID`, Sequences = inputMatrix3$SampleIDs, Taxonomy = inputMatrix3$taxonomy)
suppressMessages(library("optparse"))
suppressMessages(library("readr"))
suppressMessages(library("tidyr"))
suppressMessages(library("magrittr"))
inputOTUfiles = list.files(inputfile,pattern = opt$otu, full.names = TRUE, recursive = TRUE)
inputfile = "~/Desktop/primer13_45/favabean/"
opt$otu = "_OTU.tsv"
opt = NULL
opt$otu = "_OTU.tsv"
inputOTUfiles = list.files(inputfile,pattern = opt$otu, full.names = TRUE, recursive = TRUE)
opt$taxonomy = "_taxonomy.tsv"
inputOTUfiles = list.files(inputfile,pattern = opt$otu, full.names = TRUE, recursive = TRUE)
inputTaxonomyfiles = list.files(inputfile,pattern = opt$taxonomy, full.names = TRUE, recursive = TRUE)
inputOTUfiles
basename(inputOTUfiles)
regions = basename(inputOTUfiles) %>% grepl(pattern=opt$otu,x=.)
regions
?strsplit
basename(inputOTUfiles) %>% strsplit(split=opt$otu,x=.)
basename(inputOTUfiles) %>% strsplit(split=opt$otu,x=.) %>% unlist(.)
basename(inputOTUfiles) %>% strsplit(split=opt$otu,x=.) %>% unlist(.) %>% strsplit(split=paste0("_",myDatabase),x=.) %>% unlist(.)
myDatabase = "eHOMD"
basename(inputOTUfiles) %>% strsplit(split=opt$otu,x=.) %>% unlist(.) %>% strsplit(split=paste0("_",myDatabase),x=.) %>% unlist(.)
taxa1   = inputTaxonomyfiles    %>%  grepl(pattern=regions[1],x=.) %>% inputOTUfiles[.] %>% read_tsv(.) %>% as.data.frame(.)
taxa1   = inputTaxonomyfiles    %>%  grepl(pattern=regions[1],x=.) %>% inputOTUfiles[.] %>% read_tsv(.) %>% as.data.frame(.)
taxa2   = inputTaxonomyfiles    %>%  grepl(pattern=regions[2],x=.) %>% inputOTUfiles[.] %>% read_tsv(.) %>% as.data.frame(.)
inputOTUfiles = list.files(inputfile,pattern = opt$otu, full.names = TRUE, recursive = TRUE)
inputTaxonomyfiles = list.files(inputfile,pattern = opt$taxonomy, full.names = TRUE, recursive = TRUE)
regions = basename(inputOTUfiles) %>% strsplit(split=opt$otu,x=.) %>% unlist(.) %>% strsplit(split=paste0("_",myDatabase),x=.) %>% unlist(.)
primer1 = inputOTUfiles    %>%  grepl(pattern=regions[1],x=.) %>% inputOTUfiles[.] %>% read_tsv(.) %>% as.data.frame(.)
primer2 = inputOTUfiles    %>%  grepl(pattern=regions[2],x=.) %>% inputOTUfiles[.] %>% read_tsv(.) %>% as.data.frame(.)
taxa1   = inputTaxonomyfiles    %>%  grepl(pattern=regions[1],x=.) %>% inputOTUfiles[.] %>% read_tsv(.) %>% as.data.frame(.)
taxa2   = inputTaxonomyfiles    %>%  grepl(pattern=regions[2],x=.) %>% inputOTUfiles[.] %>% read_tsv(.) %>% as.data.frame(.)
primer1 = inputOTUfiles    %>%  grepl(pattern=regions[1],x=.) %>% inputOTUfiles[.] %>% read_tsv(.) %>% as.data.frame(.)
primer2 = inputOTUfiles    %>%  grepl(pattern=regions[2],x=.) %>% inputOTUfiles[.] %>% read_tsv(.) %>% as.data.frame(.)
taxa1   = inputTaxonomyfiles    %>%  grepl(pattern=regions[1],x=.) %>% inputTaxonomyfiles[.] %>% read_tsv(.) %>% as.data.frame(.)
taxa2   = inputTaxonomyfiles    %>%  grepl(pattern=regions[2],x=.) %>% inputTaxonomyfiles[.] %>% read_tsv(.) %>% as.data.frame(.)
total_taxa = c(taxa1$Taxonomy,taxa2$Taxonomy) %>% unique(.)
total_taxa
test = matrix(nrow=length(total_taxa),ncol=dim(primer1)[2]) %>% as.data.frame(.)
colnames(test) = colnames(primer1)
View(test)
test[,1] = total_taxa
heightOfTable = dim(test)[1]
x=1
rowV13 = primer1[ which(primer1$Taxonomy == currentTaxa), ]
currentTaxa = test[x,1]
currentTaxa
rowV13 = primer1[ which(primer1$Taxonomy == currentTaxa), ]
rowV13$taxonomy = NULL
rowV13 = colSums(rowV13) %>% t(.) %>% as.data.frame(.)
rowV45 = primer2[ which(primer2$Taxonomy == currentTaxa), ]
rowV45$taxonomy = NULL
rowV45 = colSums(rowV45) %>% t(.) %>% as.data.frame(.)
V13count = rowV13 %>% as.numeric(.) %>% dplyr::na_if(0) %>% as.data.frame(.)
V45count = rowV45 %>% as.numeric(.) %>% dplyr::na_if(0) %>% as.data.frame(.)
meansOfRow = rowMeans(cbind(V13count,V45count),na.rm=TRUE) %>% round(.) # Meaning, if any of them has NA, then just report the normal number, then round everything
meansOfRow[is.nan(meansOfRow)] = 0 # If na is present in both, then NaN will be reported, in this case, it means both rows had zeros, so just return it back to zero
test[x,] = c(currentTaxa,meansOfRow)
meansOfRow
V13count = rowV13
V13count
rowV13 = primer1[ which(primer1$Taxonomy == currentTaxa), ]
rowV13$Taxonomy = NULL
rowV13 = colSums(rowV13) %>% t(.) %>% as.data.frame(.)
rowV45 = primer2[ which(primer2$Taxonomy == currentTaxa), ]
rowV45$Taxonomy = NULL
rowV45 = colSums(rowV45) %>% t(.) %>% as.data.frame(.)
V13count = rowV13 %>% as.numeric(.) %>% dplyr::na_if(0) %>% as.data.frame(.)
V45count = rowV45 %>% as.numeric(.) %>% dplyr::na_if(0) %>% as.data.frame(.)
V13count
rowV13 = primer1[ which(primer1$Taxonomy == currentTaxa), ]
rowV13
primer1
View(primer1)
View(primer2)
View(taxa1)
primer1 = inputOTUfiles    %>%  grepl(pattern=regions[1],x=.) %>% inputOTUfiles[.] %>% read_tsv(.) %>% as.data.frame(.)
primer2 = inputOTUfiles    %>%  grepl(pattern=regions[2],x=.) %>% inputOTUfiles[.] %>% read_tsv(.) %>% as.data.frame(.)
colnames(primer1)[1] = "OTU_ID"
colnames(primer2)[1] = "OTU_ID"
primer1 = left_join(primer1,taxa1)
primer1 = dplyr::left_join(primer1,taxa1)
primer1 = dplyr::left_join(primer1,taxa1)
primer2 = dplyr::left_join(primer2,taxa2)
colnames(primer1)
inputOTUfiles = list.files(inputfile,pattern = opt$otu, full.names = TRUE, recursive = TRUE)
inputTaxonomyfiles = list.files(inputfile,pattern = opt$taxonomy, full.names = TRUE, recursive = TRUE)
regions = basename(inputOTUfiles) %>% strsplit(split=opt$otu,x=.) %>% unlist(.) %>% strsplit(split=paste0("_",myDatabase),x=.) %>% unlist(.)
primer1 = inputOTUfiles    %>%  grepl(pattern=regions[1],x=.) %>% inputOTUfiles[.] %>% read_tsv(.) %>% as.data.frame(.)
primer2 = inputOTUfiles    %>%  grepl(pattern=regions[2],x=.) %>% inputOTUfiles[.] %>% read_tsv(.) %>% as.data.frame(.)
colnames(primer1)[1] = "OTU_ID"
colnames(primer2)[1] = "OTU_ID"
taxa1   = inputTaxonomyfiles    %>%  grepl(pattern=regions[1],x=.) %>% inputTaxonomyfiles[.] %>% read_tsv(.) %>% as.data.frame(.)
taxa2   = inputTaxonomyfiles    %>%  grepl(pattern=regions[2],x=.) %>% inputTaxonomyfiles[.] %>% read_tsv(.) %>% as.data.frame(.)
total_taxa = c(taxa1$Taxonomy,taxa2$Taxonomy) %>% unique(.)
primer1 = dplyr::left_join(primer1,taxa1) %>% .[,-which(colnames(.) == "Sequences")]
primer2 = dplyr::left_join(primer2,taxa2) %>% .[,-which(colnames(.) == "Sequences")]
primer1
dim(primer1)
inputOTUfiles = list.files(inputfile,pattern = opt$otu, full.names = TRUE, recursive = TRUE)
inputTaxonomyfiles = list.files(inputfile,pattern = opt$taxonomy, full.names = TRUE, recursive = TRUE)
regions = basename(inputOTUfiles) %>% strsplit(split=opt$otu,x=.) %>% unlist(.) %>% strsplit(split=paste0("_",myDatabase),x=.) %>% unlist(.)
primer1 = inputOTUfiles    %>%  grepl(pattern=regions[1],x=.) %>% inputOTUfiles[.] %>% read_tsv(.) %>% as.data.frame(.)
primer2 = inputOTUfiles    %>%  grepl(pattern=regions[2],x=.) %>% inputOTUfiles[.] %>% read_tsv(.) %>% as.data.frame(.)
colnames(primer1)[1] = "OTU_ID"
colnames(primer2)[1] = "OTU_ID"
taxa1   = inputTaxonomyfiles    %>%  grepl(pattern=regions[1],x=.) %>% inputTaxonomyfiles[.] %>% read_tsv(.) %>% as.data.frame(.)
taxa2   = inputTaxonomyfiles    %>%  grepl(pattern=regions[2],x=.) %>% inputTaxonomyfiles[.] %>% read_tsv(.) %>% as.data.frame(.)
total_taxa = c(taxa1$Taxonomy,taxa2$Taxonomy) %>% unique(.)
test = matrix(nrow=length(total_taxa),ncol=dim(primer1)[2]) %>% as.data.frame(.)
colnames(test) = colnames(primer1)
test[,1] = total_taxa
primer1 = dplyr::left_join(primer1,taxa1) %>% .[,-which(colnames(.) == "Sequences")]
primer2 = dplyr::left_join(primer2,taxa2) %>% .[,-which(colnames(.) == "Sequences")]
heightOfTable = dim(test)[1]
x=1
currentTaxa = test[x,1]
rowV13 = primer1[ which(primer1$Taxonomy == currentTaxa), ]
rowV13$Taxonomy = NULL
rowV13 = colSums(rowV13) %>% t(.) %>% as.data.frame(.)
currentTaxa = test[x,1]
rowV13 = primer1[ which(primer1$Taxonomy == currentTaxa), ]
rowV13
rowV13 = primer1[ which(primer1$Taxonomy == currentTaxa), ]
rowV13$Taxonomy = NULL
rowV13$OTU_ID = NULL
rowV13 = colSums(rowV13) %>% t(.) %>% as.data.frame(.)
rowV45 = primer2[ which(primer2$Taxonomy == currentTaxa), ]
rowV45$Taxonomy = NULL
rowV45$OTU_ID = NULL
rowV45 = colSums(rowV45) %>% t(.) %>% as.data.frame(.)
rowV45
V13count = rowV13 %>% as.numeric(.) %>% dplyr::na_if(0) %>% as.data.frame(.)
V45count = rowV45 %>% as.numeric(.) %>% dplyr::na_if(0) %>% as.data.frame(.)
V13count
meansOfRow = rowMeans(cbind(V13count,V45count),na.rm=TRUE) %>% round(.) # Meaning, if any of them has NA, then just report the normal number, then round everything
meansOfRow[is.nan(meansOfRow)] = 0 # If na is present in both, then NaN will be reported, in this case, it means both rows had zeros, so just return it back to zero
test[x,] = c(currentTaxa,meansOfRow)
inputOTUfiles = list.files(inputfile,pattern = opt$otu, full.names = TRUE, recursive = TRUE)
inputTaxonomyfiles = list.files(inputfile,pattern = opt$taxonomy, full.names = TRUE, recursive = TRUE)
regions = basename(inputOTUfiles) %>% strsplit(split=opt$otu,x=.) %>% unlist(.) %>% strsplit(split=paste0("_",myDatabase),x=.) %>% unlist(.)
primer1 = inputOTUfiles    %>%  grepl(pattern=regions[1],x=.) %>% inputOTUfiles[.] %>% read_tsv(.) %>% as.data.frame(.)
primer2 = inputOTUfiles    %>%  grepl(pattern=regions[2],x=.) %>% inputOTUfiles[.] %>% read_tsv(.) %>% as.data.frame(.)
colnames(primer1)[1] = "OTU_ID"
colnames(primer2)[1] = "OTU_ID"
taxa1   = inputTaxonomyfiles    %>%  grepl(pattern=regions[1],x=.) %>% inputTaxonomyfiles[.] %>% read_tsv(.) %>% as.data.frame(.)
taxa2   = inputTaxonomyfiles    %>%  grepl(pattern=regions[2],x=.) %>% inputTaxonomyfiles[.] %>% read_tsv(.) %>% as.data.frame(.)
total_taxa = c(taxa1$Taxonomy,taxa2$Taxonomy) %>% unique(.)
test = matrix(nrow=length(total_taxa),ncol=dim(primer1)[2]) %>% as.data.frame(.)
colnames(test) = colnames(primer1)
test[,1] = total_taxa
primer1 = dplyr::left_join(primer1,taxa1) %>% .[,-which(colnames(.) == "Sequences")]
primer2 = dplyr::left_join(primer2,taxa2) %>% .[,-which(colnames(.) == "Sequences")]
heightOfTable = dim(test)[1]
for (x in 1:heightOfTable){ # Iterate over the rows
currentTaxa = test[x,1]
rowV13 = primer1[ which(primer1$Taxonomy == currentTaxa), ]
rowV13$Taxonomy = NULL
rowV13$OTU_ID = NULL
rowV13 = colSums(rowV13) %>% t(.) %>% as.data.frame(.)
rowV45 = primer2[ which(primer2$Taxonomy == currentTaxa), ]
rowV45$Taxonomy = NULL
rowV45$OTU_ID = NULL
rowV45 = colSums(rowV45) %>% t(.) %>% as.data.frame(.)
if (dim(rowV45)[1] == 0){
test[x,] = rowV13 # If the rowV45 is empty, then add the V13 row
} else if (dim(rowV13)[1] == 0){
test[x,] = rowV45 # If the rowV13 is empty, then add the V45 row
} else { # Meaning, the taxa exists in both tables
V13count = rowV13 %>% as.numeric(.) %>% dplyr::na_if(0) %>% as.data.frame(.)
V45count = rowV45 %>% as.numeric(.) %>% dplyr::na_if(0) %>% as.data.frame(.)
meansOfRow = rowMeans(cbind(V13count,V45count),na.rm=TRUE) %>% round(.) # Meaning, if any of them has NA, then just report the normal number, then round everything
meansOfRow[is.nan(meansOfRow)] = 0 # If na is present in both, then NaN will be reported, in this case, it means both rows had zeros, so just return it back to zero
test[x,] = c(currentTaxa,meansOfRow)
}
}
opt = NULL
opt$input = "~/Desktop/primer13_45/favabean/V13_eHOMD_OTU.tsv"
opt$primer = "~/Desktop/primer13_45/favabean/V45_eHOMD_OTU.tsv"
opt$taxonomy = "~/Desktop/primer13_45/favabean/V13_eHOMD_taxonomy.tsv"
opt$taxa = "~/Desktop/primer13_45/favabean/V45_eHOMD_taxonomy.tsv"
primer1 = read_tsv(opt$input) %>% as.data.frame(.)
suppressMessages(library("optparse"))
suppressMessages(library("readr"))
suppressMessages(library("tidyr"))
suppressMessages(library("magrittr"))
primer1 = read_tsv(opt$input) %>% as.data.frame(.)
primer2 = read_tsv(opt$primer) %>% as.data.frame(.)
taxa1   = read_tsv(opt$taxonomy) %>% as.data.frame(.)
taxa2   = read_tsv(opt$taxa) %>% as.data.frame(.)
colnames(primer1)[1] = "OTU_ID"
colnames(primer2)[1] = "OTU_ID"
total_taxa = c(taxa1$Taxonomy,taxa2$Taxonomy) %>% unique(.)
test = matrix(nrow=length(total_taxa),ncol=dim(primer1)[2]) %>% as.data.frame(.)
colnames(test) = colnames(primer1)
test[,1] = total_taxa
primer1 = dplyr::left_join(primer1,taxa1) %>% .[,-which(colnames(.) == "Sequences")]
primer2 = dplyr::left_join(primer2,taxa2) %>% .[,-which(colnames(.) == "Sequences")]
heightOfTable = dim(test)[1]
primer1 = read_tsv(opt$input) %>% as.data.frame(.)
primer2 = read_tsv(opt$primer) %>% as.data.frame(.)
taxa1   = read_tsv(opt$taxonomy) %>% as.data.frame(.)
taxa2   = read_tsv(opt$taxa) %>% as.data.frame(.)
colnames(primer1)[1] = "OTU_ID"
colnames(primer2)[1] = "OTU_ID"
total_taxa = c(taxa1$Taxonomy,taxa2$Taxonomy) %>% unique(.)
test = matrix(nrow=length(total_taxa),ncol=dim(primer1)[2]) %>% as.data.frame(.)
colnames(test) = colnames(primer1)
test[,1] = total_taxa
primer1 = dplyr::left_join(primer1,taxa1) %>% .[,-which(colnames(.) == "Sequences")]
primer2 = dplyr::left_join(primer2,taxa2) %>% .[,-which(colnames(.) == "Sequences")]
heightOfTable = dim(test)[1]
for (x in 1:heightOfTable){ # Iterate over the rows
currentTaxa = test[x,1]
rowV13 = primer1[ which(primer1$Taxonomy == currentTaxa), ]
rowV13$Taxonomy = NULL
rowV13$OTU_ID = NULL
rowV13 = colSums(rowV13) %>% t(.) %>% as.data.frame(.)
rowV45 = primer2[ which(primer2$Taxonomy == currentTaxa), ]
rowV45$Taxonomy = NULL
rowV45$OTU_ID = NULL
rowV45 = colSums(rowV45) %>% t(.) %>% as.data.frame(.)
if (dim(rowV45)[1] == 0){
test[x,] = rowV13 # If the rowV45 is empty, then add the V13 row
} else if (dim(rowV13)[1] == 0){
test[x,] = rowV45 # If the rowV13 is empty, then add the V45 row
} else { # Meaning, the taxa exists in both tables
V13count = rowV13 %>% as.numeric(.) %>% dplyr::na_if(0) %>% as.data.frame(.)
V45count = rowV45 %>% as.numeric(.) %>% dplyr::na_if(0) %>% as.data.frame(.)
meansOfRow = rowMeans(cbind(V13count,V45count),na.rm=TRUE) %>% round(.) # Meaning, if any of them has NA, then just report the normal number, then round everything
meansOfRow[is.nan(meansOfRow)] = 0 # If na is present in both, then NaN will be reported, in this case, it means both rows had zeros, so just return it back to zero
test[x,] = c(currentTaxa,meansOfRow)
}
}
suppressMessages(library("optparse"))
suppressMessages(library("dada2"))
inputFolder = "/Users/khaled/Downloads/metabolic syndrome/favabean/Run1-V34/dada2/filtered"
rDirection = "R1"
cores = 18
theFiles = sort(list.files(paste0(inputFolder,"/filtered"), pattern=paste0(rDirection,".*fastq.*"), full.names = TRUE, recursive = TRUE))
theFiles
inputFolder = "/Users/khaled/Downloads/metabolic syndrome/favabean/Run1-V34/dada2"
theFiles = sort(list.files(paste0(inputFolder,"/filtered"), pattern=paste0(rDirection,".*fastq.*"), full.names = TRUE, recursive = TRUE))
theFiles
theFiles
DADA2errors = learnErrors(theFiles, randomize=TRUE, multithread = cores, verbose = 1)
rm(cores,opt)
save(DADA2errors, inputFolder, theFiles, file = paste0(inputFolder,"_DADA2Errors-",rDirection,".RData"), envir = .GlobalEnv)
rDirection = "R2"
theFiles = sort(list.files(paste0(inputFolder,"/filtered"), pattern=paste0(rDirection,".*fastq.*"), full.names = TRUE, recursive = TRUE))
DADA2errors = learnErrors(theFiles, randomize=TRUE, multithread = cores, verbose = 1)
cores = 18
save(DADA2errors, inputFolder, theFiles, file = paste0(inputFolder,"_DADA2Errors-",rDirection,".RData"), envir = .GlobalEnv)
DADA2errors = learnErrors(theFiles, randomize=TRUE, multithread = cores, verbose = 1)
library("dada2")
?learnErrors
inputFolder = "~/Desktop/metabolic syndrome/favabean/Batch1-V34/dada2/"
rDirection = "R2"
rDirection = "R1"
theFiles = sort(list.files(paste0(inputFolder,"/filtered"), pattern=paste0(rDirection,".*fastq.*"), full.names = TRUE, recursive = TRUE))
cores = 19
DADA2errors = learnErrors(theFiles, randomize=TRUE, multithread = cores, verbose = 2)
packageVersion("dada2")
R
