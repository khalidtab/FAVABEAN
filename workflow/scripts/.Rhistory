primer_joined_condensed = primer_joined %>% select(-OTU_ID) %>% group_by(Taxonomy) %>% summarize(across(everything(), sum)) %>% as.data.frame(.)
return(list(primer_joined   =  as.data.frame(primer_joined),
primer_condensed=as.data.frame(primer_joined_condensed)))
}
opt = NULL
opt$output = "data/favabean/primer_averaged.tsv"
message("First primer.")
primer1 = read_tsv(theFiles[1]) %>% as.data.frame(.)
message("Second primer.")
primer2 = read_tsv(theFiles[2]) %>% as.data.frame(.)
sampleNames = unique(c(colnames(primer1), colnames(primer2)))
sampleNames = sampleNames[-which(sampleNames %in% c("taxonomy","#SampleID"))]
sharedNonSharedSamples = (c(colnames(primer1),colnames(primer2)))
shared = sharedNonSharedSamples[duplicated(sharedNonSharedSamples)]
shared = shared[-which(shared %in% c("taxonomy","#SampleID"))]
notShared = sampleNames[-which(shared %in% sampleNames)]
if(length(notShared) > 0){
warning("The following samples were found in only one primer. Printing information on the samples, and will continue primer averaging without them.")
print(notShared)
print(paste0("Primer1: ", basename(theFiles[1]),
"    primer2: ",basename(theFiles[2])))
}
taxonomy = unique(c(primer1$taxonomy,primer2$taxonomy))
test = matrix(nrow=length(taxonomy),ncol=1+length(shared)) %>% as.data.frame(.)
heightOfTable = dim(test)[1]
for (x in 1:heightOfTable){ # Iterate over the rows
currentTaxa = test[x,1]
rowV13 = primer1[ which(primer1$Taxonomy == currentTaxa), ]
rowV13$Taxonomy = NULL
rowV13$OTU_ID = NULL
rowV13 = colSums(rowV13) %>% t(.) %>% as.data.frame(.)
rowV45 = primer2[ which(primer2$Taxonomy == currentTaxa), ]
rowV45$Taxonomy = NULL
rowV45$OTU_ID = NULL
rowV45 = colSums(rowV45) %>% t(.) %>% as.data.frame(.)
if (dim(rowV45)[1] == 0){
test[x,] = rowV13 # If the rowV45 is empty, then add the V13 row
} else if (dim(rowV13)[1] == 0){
test[x,] = rowV45 # If the rowV13 is empty, then add the V45 row
} else { # Meaning, the taxa exists in both tables
V13count = rowV13 %>% as.numeric(.) %>% dplyr::na_if(0) %>% as.data.frame(.)
V45count = rowV45 %>% as.numeric(.) %>% dplyr::na_if(0) %>% as.data.frame(.)
meansOfRow = rowMeans(cbind(V13count,V45count),na.rm=TRUE) %>% round(.) # Meaning, if any of them has NA, then just report the normal number, then round everything
meansOfRow[is.nan(meansOfRow)] = 0 # If na is present in both, then NaN will be reported, in this case, it means both rows had zeros, so just return it back to zero
test[x,] = c(currentTaxa,meansOfRow)
}
}
View(test)
test = matrix(nrow=length(taxonomy),ncol=1+length(shared)) %>% as.data.frame(.)
colnames(test) = c("OTU_ID",shared)
test[,1] = taxonomy
heightOfTable = dim(test)[1]
heightOfTable
x
currentTaxa = test[x,1]
currentTaxa
rowV13 = primer1[ which(primer1$taxonomy == currentTaxa), ]
rowV13$Taxonomy = NULL
rowV13$OTU_ID = NULL
rowV13 = colSums(rowV13) %>% t(.) %>% as.data.frame(.)
rowV13 = primer1[ which(primer1$taxonomy == currentTaxa), ]
rowV13$taxonomy = NULL
rowV13$`#SampleID` = NULL
rowV13 = colSums(rowV13) %>% t(.) %>% as.data.frame(.)
rowV13 = primer1[ which(primer1$taxonomy == currentTaxa), ]
rowV13$taxonomy = NULL
rowV13$`#SampleID` = NULL
rowV13 = colSums(rowV13) %>% t(.) %>% as.data.frame(.)
rowV45 = primer2[ which(primer2$taxonomy == currentTaxa), ]
rowV45$taxonomy = NULL
rowV45$`#SampleID` = NULL
rowV45 = colSums(rowV45) %>% t(.) %>% as.data.frame(.)
for (x in 1:heightOfTable){ # Iterate over the rows
currentTaxa = test[x,1]
rowV13 = primer1[ which(primer1$taxonomy == currentTaxa), ]
rowV13$taxonomy = NULL
rowV13$`#SampleID` = NULL
rowV13 = colSums(rowV13) %>% t(.) %>% as.data.frame(.)
rowV45 = primer2[ which(primer2$taxonomy == currentTaxa), ]
rowV45$taxonomy = NULL
rowV45$`#SampleID` = NULL
rowV45 = colSums(rowV45) %>% t(.) %>% as.data.frame(.)
if (dim(rowV45)[1] == 0){
test[x,] = rowV13 # If the rowV45 is empty, then add the V13 row
} else if (dim(rowV13)[1] == 0){
test[x,] = rowV45 # If the rowV13 is empty, then add the V45 row
} else { # Meaning, the taxa exists in both tables
V13count = rowV13 %>% as.numeric(.) %>% dplyr::na_if(0) %>% as.data.frame(.)
V45count = rowV45 %>% as.numeric(.) %>% dplyr::na_if(0) %>% as.data.frame(.)
meansOfRow = rowMeans(cbind(V13count,V45count),na.rm=TRUE) %>% round(.) # Meaning, if any of them has NA, then just report the normal number, then round everything
meansOfRow[is.nan(meansOfRow)] = 0 # If na is present in both, then NaN will be reported, in this case, it means both rows had zeros, so just return it back to zero
test[x,] = c(currentTaxa,meansOfRow)
}
}
dim(rowV45)[1]
rowV13 = primer1[ which(primer1$taxonomy == currentTaxa), ]
rowV13$taxonomy = NULL
rowV13$`#SampleID` = NULL
rowV13 = colSums(rowV13) %>% t(.) %>% as.data.frame(.)
rowV45 = primer2[ which(primer2$taxonomy == currentTaxa), ]
rowV45$taxonomy = NULL
rowV45$`#SampleID` = NULL
rowV45 = colSums(rowV45) %>% t(.) %>% as.data.frame(.)
rowV13
dim(rowV13)[1]
dim(rowV13)
rowV13 = primer1[ which(primer1$taxonomy == currentTaxa), ]
rowV13$taxonomy = NULL
rowV13$`#SampleID` = NULL
rowV13 = colSums(rowV13)
rowV13
currentTaxa = test[x,1]
rowV13 = primer1[ which(primer1$taxonomy == currentTaxa), ]
rowV13$taxonomy = NULL
rowV13$`#SampleID` = NULL
rowV13
colSums(rowV13)
colSums(as.numeric(rowV13))
as.numeric(rowV13)
currentTaxa = test[x,1]
rowV13 = primer1[ which(primer1$taxonomy == currentTaxa), ]
rowV13$taxonomy = NULL
rowV13$`#SampleID` = NULL
rowV45 = primer2[ which(primer2$taxonomy == currentTaxa), ]
rowV45$taxonomy = NULL
rowV45$`#SampleID` = NULL
sum(as.numeric(rowV45))
for (x in 1:heightOfTable){ # Iterate over the rows
currentTaxa = test[x,1]
rowV13 = primer1[ which(primer1$taxonomy == currentTaxa), ]
rowV13$taxonomy = NULL
rowV13$`#SampleID` = NULL
rowV45 = primer2[ which(primer2$taxonomy == currentTaxa), ]
rowV45$taxonomy = NULL
rowV45$`#SampleID` = NULL
if (sum(as.numeric(rowV45)) == 0){
test[x,] = rowV13 # If the rowV45 is empty, then add the V13 row
} else if (sum(as.numeric(rowV13)) == 0){
test[x,] = rowV45 # If the rowV13 is empty, then add the V45 row
} else { # Meaning, the taxa exists in both tables
V13count = rowV13 %>% as.numeric(.) %>% dplyr::na_if(0) %>% as.data.frame(.)
V45count = rowV45 %>% as.numeric(.) %>% dplyr::na_if(0) %>% as.data.frame(.)
meansOfRow = rowMeans(cbind(V13count,V45count),na.rm=TRUE) %>% round(.) # Meaning, if any of them has NA, then just report the normal number, then round everything
meansOfRow[is.nan(meansOfRow)] = 0 # If na is present in both, then NaN will be reported, in this case, it means both rows had zeros, so just return it back to zero
test[x,] = c(currentTaxa,meansOfRow)
}
}
rowV13 %>% as.numeric(.) %>% dplyr::na_if(0) %>% as.data.frame(.)
shared
primer1 = primer1 %>% select(shared)
primer2 = primer2 %>% select(shared)
message("First primer.")
primer1 = read_tsv(theFiles[1]) %>% as.data.frame(.)
message("Second primer.")
primer2 = read_tsv(theFiles[2]) %>% as.data.frame(.)
sampleNames = unique(c(colnames(primer1), colnames(primer2)))
sampleNames = sampleNames[-which(sampleNames %in% c("taxonomy","#SampleID"))]
sharedNonSharedSamples = (c(colnames(primer1),colnames(primer2)))
shared = sharedNonSharedSamples[duplicated(sharedNonSharedSamples)]
shared = shared[-which(shared %in% c("taxonomy","#SampleID"))]
notShared = sampleNames[-which(shared %in% sampleNames)]
if(length(notShared) > 0){
warning("The following samples were found in only one primer. Printing information on the samples, and will continue primer averaging without them.")
print(notShared)
print(paste0("Primer1: ", basename(theFiles[1]),
"    primer2: ",basename(theFiles[2])))
}
primer1 = primer1 %>% select(shared)
primer2 = primer2 %>% select(shared)
taxonomy = unique(c(primer1$taxonomy,primer2$taxonomy))
test = matrix(nrow=length(taxonomy),ncol=1+length(shared)) %>% as.data.frame(.)
colnames(test) = c("OTU_ID",shared)
test[,1] = taxonomy
heightOfTable = dim(test)[1]
for (x in 1:heightOfTable){ # Iterate over the rows
currentTaxa = test[x,1]
rowV13 = primer1[ which(primer1$taxonomy == currentTaxa), ]
rowV13$taxonomy = NULL
rowV13$`#SampleID` = NULL
rowV45 = primer2[ which(primer2$taxonomy == currentTaxa), ]
rowV45$taxonomy = NULL
rowV45$`#SampleID` = NULL
if (sum(as.numeric(rowV45)) == 0){
test[x,] = rowV13 # If the rowV45 is empty, then add the V13 row
} else if (sum(as.numeric(rowV13)) == 0){
test[x,] = rowV45 # If the rowV13 is empty, then add the V45 row
} else { # Meaning, the taxa exists in both tables
V13count = rowV13 %>% as.numeric(.) %>% dplyr::na_if(0) %>% as.data.frame(.)
V45count = rowV45 %>% as.numeric(.) %>% dplyr::na_if(0) %>% as.data.frame(.)
meansOfRow = rowMeans(cbind(V13count,V45count),na.rm=TRUE) %>% round(.) # Meaning, if any of them has NA, then just report the normal number, then round everything
meansOfRow[is.nan(meansOfRow)] = 0 # If na is present in both, then NaN will be reported, in this case, it means both rows had zeros, so just return it back to zero
test[x,] = c(currentTaxa,meansOfRow)
}
}
test = matrix(nrow=length(taxonomy),ncol=1+length(shared)) %>% as.data.frame(.)
colnames(test) = c("OTU_ID",shared)
test[,1] = taxonomy
heightOfTable = dim(test)[1]
xx
x
currentTaxa = test[x,1]
currentTaxa
theFiles = list.files("data/favabean/","_OTUcondensed.tsv",full.names = TRUE)
readAndCondense = function(primer_path,taxa_path){
primer = read_tsv(primer_path,show_col_types = FALSE) %>% as.data.frame(.)
taxa   = read_tsv(taxa_path,show_col_types = FALSE) %>% as.data.frame(.)
colnames(primer)[1] = "OTU_ID"
primer_joined = dplyr::left_join(primer,taxa) %>% .[,-which(colnames(.) %in% c("Sequences"))]
message("Condensing the sequences based on the taxonomic rank.")
primer_joined_condensed = primer_joined %>% select(-OTU_ID) %>% group_by(Taxonomy) %>% summarize(across(everything(), sum)) %>% as.data.frame(.)
return(list(primer_joined   =  as.data.frame(primer_joined),
primer_condensed=as.data.frame(primer_joined_condensed)))
}
opt = NULL
opt$output = "data/favabean/primer_averaged.tsv"
message("First primer.")
primer1 = read_tsv(theFiles[1]) %>% as.data.frame(.)
theFiles = list.files("/Users/khaled/Desktop/sequencers_part2/Andrew/favabean/","_OTUcondensed.tsv",full.names = TRUE)
readAndCondense = function(primer_path,taxa_path){
primer = read_tsv(primer_path,show_col_types = FALSE) %>% as.data.frame(.)
taxa   = read_tsv(taxa_path,show_col_types = FALSE) %>% as.data.frame(.)
colnames(primer)[1] = "OTU_ID"
primer_joined = dplyr::left_join(primer,taxa) %>% .[,-which(colnames(.) %in% c("Sequences"))]
message("Condensing the sequences based on the taxonomic rank.")
primer_joined_condensed = primer_joined %>% select(-OTU_ID) %>% group_by(Taxonomy) %>% summarize(across(everything(), sum)) %>% as.data.frame(.)
return(list(primer_joined   =  as.data.frame(primer_joined),
primer_condensed=as.data.frame(primer_joined_condensed)))
}
opt = NULL
opt$output = "data/favabean/primer_averaged.tsv"
message("First primer.")
primer1 = read_tsv(theFiles[1]) %>% as.data.frame(.)
message("Second primer.")
primer2 = read_tsv(theFiles[2]) %>% as.data.frame(.)
sampleNames = unique(c(colnames(primer1), colnames(primer2)))
sampleNames = sampleNames[-which(sampleNames %in% c("taxonomy","#SampleID"))]
sharedNonSharedSamples = (c(colnames(primer1),colnames(primer2)))
shared = sharedNonSharedSamples[duplicated(sharedNonSharedSamples)]
shared = shared[-which(shared %in% c("taxonomy","#SampleID"))]
notShared = sampleNames[-which(shared %in% sampleNames)]
if(length(notShared) > 0){
warning("The following samples were found in only one primer. Printing information on the samples, and will continue primer averaging without them.")
print(notShared)
print(paste0("Primer1: ", basename(theFiles[1]),
"    primer2: ",basename(theFiles[2])))
}
primer1 = primer1 %>% select(shared)
primer2 = primer2 %>% select(shared)
taxonomy = unique(c(primer1$taxonomy,primer2$taxonomy))
test = matrix(nrow=length(taxonomy),ncol=1+length(shared)) %>% as.data.frame(.)
colnames(test) = c("OTU_ID",shared)
test[,1] = taxonomy
heightOfTable = dim(test)[1]
readAndCondense = function(primer_path,taxa_path){
primer = read_tsv(primer_path,show_col_types = FALSE) %>% as.data.frame(.)
taxa   = read_tsv(taxa_path,show_col_types = FALSE) %>% as.data.frame(.)
colnames(primer)[1] = "OTU_ID"
primer_joined = dplyr::left_join(primer,taxa) %>% .[,-which(colnames(.) %in% c("Sequences"))]
message("Condensing the sequences based on the taxonomic rank.")
primer_joined_condensed = primer_joined %>% select(-OTU_ID) %>% group_by(Taxonomy) %>% summarize(across(everything(), sum)) %>% as.data.frame(.)
return(list(primer_joined   =  as.data.frame(primer_joined),
primer_condensed=as.data.frame(primer_joined_condensed)))
}
opt = NULL
opt$output = "data/favabean/primer_averaged.tsv"
message("First primer.")
primer1 = read_tsv(theFiles[1]) %>% as.data.frame(.)
message("Second primer.")
primer2 = read_tsv(theFiles[2]) %>% as.data.frame(.)
sampleNames = unique(c(colnames(primer1), colnames(primer2)))
sampleNames = sampleNames[-which(sampleNames %in% c("taxonomy","#SampleID"))]
sharedNonSharedSamples = (c(colnames(primer1),colnames(primer2)))
shared = sharedNonSharedSamples[duplicated(sharedNonSharedSamples)]
shared = shared[-which(shared %in% c("taxonomy","#SampleID"))]
notShared = sampleNames[-which(shared %in% sampleNames)]
if(length(notShared) > 0){
warning("The following samples were found in only one primer. Printing information on the samples, and will continue primer averaging without them.")
print(notShared)
print(paste0("Primer1: ", basename(theFiles[1]),
"    primer2: ",basename(theFiles[2])))
}
primer1 = primer1 %>% select(shared)
primer2 = primer2 %>% select(shared)
taxonomy = unique(c(primer1$taxonomy,primer2$taxonomy))
taxonomy
readAndCondense = function(primer_path,taxa_path){
primer = read_tsv(primer_path,show_col_types = FALSE) %>% as.data.frame(.)
taxa   = read_tsv(taxa_path,show_col_types = FALSE) %>% as.data.frame(.)
colnames(primer)[1] = "OTU_ID"
primer_joined = dplyr::left_join(primer,taxa) %>% .[,-which(colnames(.) %in% c("Sequences"))]
message("Condensing the sequences based on the taxonomic rank.")
primer_joined_condensed = primer_joined %>% select(-OTU_ID) %>% group_by(Taxonomy) %>% summarize(across(everything(), sum)) %>% as.data.frame(.)
return(list(primer_joined   =  as.data.frame(primer_joined),
primer_condensed=as.data.frame(primer_joined_condensed)))
}
opt = NULL
opt$output = "data/favabean/primer_averaged.tsv"
message("First primer.")
primer1 = read_tsv(theFiles[1]) %>% as.data.frame(.)
message("Second primer.")
primer2 = read_tsv(theFiles[2]) %>% as.data.frame(.)
sampleNames = unique(c(colnames(primer1), colnames(primer2)))
sampleNames = sampleNames[-which(sampleNames %in% c("taxonomy","#SampleID"))]
sharedNonSharedSamples = (c(colnames(primer1),colnames(primer2)))
shared = sharedNonSharedSamples[duplicated(sharedNonSharedSamples)]
shared = shared[-which(shared %in% c("taxonomy","#SampleID"))]
notShared = sampleNames[-which(shared %in% sampleNames)]
if(length(notShared) > 0){
warning("The following samples were found in only one primer. Printing information on the samples, and will continue primer averaging without them.")
print(notShared)
print(paste0("Primer1: ", basename(theFiles[1]),
"    primer2: ",basename(theFiles[2])))
}
primer1 = primer1 %>% select(shared,"taxonomy")
primer2 = primer2 %>% select(shared,"taxonomy")
taxonomy = unique(c(primer1$tax,primer2$taxonomy))
test = matrix(nrow=length(taxonomy),ncol=1+length(shared)) %>% as.data.frame(.)
colnames(test) = c("OTU_ID",shared)
test[,1] = taxonomy
heightOfTable = dim(test)[1]
for (x in 1:heightOfTable){ # Iterate over the rows
currentTaxa = test[x,1]
rowV13 = primer1[ which(primer1$taxonomy == currentTaxa), ]
rowV13$taxonomy = NULL
rowV13$`#SampleID` = NULL
rowV45 = primer2[ which(primer2$taxonomy == currentTaxa), ]
rowV45$taxonomy = NULL
rowV45$`#SampleID` = NULL
if (sum(as.numeric(rowV45)) == 0){
test[x,] = rowV13 # If the rowV45 is empty, then add the V13 row
} else if (sum(as.numeric(rowV13)) == 0){
test[x,] = rowV45 # If the rowV13 is empty, then add the V45 row
} else { # Meaning, the taxa exists in both tables
V13count = rowV13 %>% as.numeric(.) %>% dplyr::na_if(0) %>% as.data.frame(.)
V45count = rowV45 %>% as.numeric(.) %>% dplyr::na_if(0) %>% as.data.frame(.)
meansOfRow = rowMeans(cbind(V13count,V45count),na.rm=TRUE) %>% round(.) # Meaning, if any of them has NA, then just report the normal number, then round everything
meansOfRow[is.nan(meansOfRow)] = 0 # If na is present in both, then NaN will be reported, in this case, it means both rows had zeros, so just return it back to zero
test[x,] = c(currentTaxa,meansOfRow)
}
}
readAndCondense = function(primer_path,taxa_path){
primer = read_tsv(primer_path,show_col_types = FALSE) %>% as.data.frame(.)
taxa   = read_tsv(taxa_path,show_col_types = FALSE) %>% as.data.frame(.)
colnames(primer)[1] = "OTU_ID"
primer_joined = dplyr::left_join(primer,taxa) %>% .[,-which(colnames(.) %in% c("Sequences"))]
message("Condensing the sequences based on the taxonomic rank.")
primer_joined_condensed = primer_joined %>% select(-OTU_ID) %>% group_by(Taxonomy) %>% summarize(across(everything(), sum)) %>% as.data.frame(.)
return(list(primer_joined   =  as.data.frame(primer_joined),
primer_condensed=as.data.frame(primer_joined_condensed)))
}
opt = NULL
opt$output = "data/favabean/primer_averaged.tsv"
message("First primer.")
primer1 = read_tsv(theFiles[1]) %>% as.data.frame(.)
message("Second primer.")
primer2 = read_tsv(theFiles[2]) %>% as.data.frame(.)
sampleNames = unique(c(colnames(primer1), colnames(primer2)))
sampleNames = sampleNames[-which(sampleNames %in% c("taxonomy","#SampleID"))]
sharedNonSharedSamples = (c(colnames(primer1),colnames(primer2)))
shared = sharedNonSharedSamples[duplicated(sharedNonSharedSamples)]
shared = shared[-which(shared %in% c("taxonomy","#SampleID"))]
notShared = sampleNames[-which(shared %in% sampleNames)]
if(length(notShared) > 0){
warning("The following samples were found in only one primer. Printing information on the samples, and will continue primer averaging without them.")
print(notShared)
print(paste0("Primer1: ", basename(theFiles[1]),
"    primer2: ",basename(theFiles[2])))
}
primer1 = primer1 %>% select(shared,"taxonomy")
primer2 = primer2 %>% select(shared,"taxonomy")
taxonomy = unique(c(primer1$tax,primer2$taxonomy))
test = matrix(nrow=length(taxonomy),ncol=1+length(shared)) %>% as.data.frame(.)
colnames(test) = c("OTU_ID",shared)
test[,1] = taxonomy
heightOfTable = dim(test)[1]
test[x,1]
test[x,2]
x
test[4,1]
test[5,1]
x
currentTaxa = test[x,1]
currentTaxa
rowV13 = primer1[ which(primer1$taxonomy == currentTaxa), ]
rowV13 = primer1[ which(primer1$taxonomy == currentTaxa), ]
rowV13$taxonomy = NULL
rowV13$`#SampleID` = NULL
rowV45 = primer2[ which(primer2$taxonomy == currentTaxa), ]
rowV45$taxonomy = NULL
rowV45$`#SampleID` = NULL
sum(as.numeric(rowV45))
sum(as.numeric(rowV13))
is.na(sum(as.numeric(rowV45))
)
for (x in 1:heightOfTable){ # Iterate over the rows
currentTaxa = test[x,1]
rowV13 = primer1[ which(primer1$taxonomy == currentTaxa), ]
rowV13$taxonomy = NULL
rowV13$`#SampleID` = NULL
rowV45 = primer2[ which(primer2$taxonomy == currentTaxa), ]
rowV45$taxonomy = NULL
rowV45$`#SampleID` = NULL
if (is.na(sum(as.numeric(rowV45)))){
test[x,] = rowV13 # If the rowV45 is empty, then add the V13 row
} else if (is.na(sum(as.numeric(rowV13)))){
test[x,] = rowV45 # If the rowV13 is empty, then add the V45 row
} else { # Meaning, the taxa exists in both tables
V13count = rowV13 %>% as.numeric(.) %>% dplyr::na_if(0) %>% as.data.frame(.)
V45count = rowV45 %>% as.numeric(.) %>% dplyr::na_if(0) %>% as.data.frame(.)
meansOfRow = rowMeans(cbind(V13count,V45count),na.rm=TRUE) %>% round(.) # Meaning, if any of them has NA, then just report the normal number, then round everything
meansOfRow[is.nan(meansOfRow)] = 0 # If na is present in both, then NaN will be reported, in this case, it means both rows had zeros, so just return it back to zero
test[x,] = c(currentTaxa,meansOfRow)
}
}
test[,1] = taxonomy
test[3,]
rowSums(test[,-1])
test[,-1]
rowSums(test[,-1])
class(test$G10CB)
test[, -1] <- lapply(test[, -1], function(x) as.numeric(as.character(x)))
rowSums(test[,.1])
rowSums(test[,-1])
sort(rowSums(test[,-1]))
suppressMessages(library("optparse"))
suppressMessages(library("readr"))
suppressMessages(library("tidyr"))
suppressMessages(library("magrittr"))
suppressMessages(library("jsonlite"))
suppressMessages(library("dada2"))
jsonInput = "/Users/khaled/Desktop/sequencers_part2/michael gloguaer experimental gingivitis study  same spot multiple times/favabean/Batch1-V45/figaro/trimParameters.json" %>% jsonlite::fromJSON(.)
splitExpectedEE = as.data.frame(jsonInput$maxExpectedError) %>% as.matrix(.) %>% t(.)
colnames(splitExpectedEE) = c("R1EE","R2EE")
splitTrimPosition = as.data.frame(jsonInput$trimPosition) %>% as.matrix(.) %>% t(.)
colnames(splitTrimPosition) = c("R1Trim","R2Trim")
readRetentionPercent = jsonInput$readRetentionPercent
score = jsonInput$score
myJSONTable  =  cbind(splitExpectedEE,splitTrimPosition,readRetentionPercent,score) %>% as.data.frame(.)
inputFolder = "/Users/khaled/Desktop/sequencers_part2/michael gloguaer experimental gingivitis study  same spot multiple times/favabean/Batch1-V45/cutadapt/"
cores = 20
most_coverage = myJSONTable %>% .[which(.$readRetentionPercent == max(.$readRetentionPercent)),]
most_coverage
result_row = most_coverage[which.max(most_coverage$score),] # If there are still ties, find row with maximum score
result_row
fnFs = sort(list.files(inputFolder, pattern="R1", full.names = TRUE))
fnFs
fnRs = sort(list.files(inputFolder, pattern="R2", full.names = TRUE))
sample.names <- sapply(strsplit(basename(fnFs), "_R1_"), `[`, 1)
filtFs <- file.path(paste0(outputFolder), "filtered", paste0(sample.names, "_filt_S1_L001_R1_001.fastq.gz"))
outputFolder = "/Users/khaled/Desktop/sequencers_part2/michael gloguaer experimental gingivitis study  same spot multiple times/favabean/Batch1-V45/dada2/filtered"
filtFs <- file.path(paste0(outputFolder), "filtered", paste0(sample.names, "_filt_S1_L001_R1_001.fastq.gz"))
filtRs <- file.path(paste0(outputFolder), "filtered", paste0(sample.names, "_filt_S1_L001_R2_001.fastq.gz"))
names(filtFs) <- sample.names
names(filtRs) <- sample.names
print("Files detected, will perform filtering and trimming on the fastq files.")
out = filterAndTrim(fnFs, filtFs, fnRs, filtRs,
truncLen=c(result_row$R1Trim,result_row$R2Trim),
maxN=0,
maxEE=c(result_row$R1EE,result_row$R2EE), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=cores, matchIDs=TRUE)
result_row$R1Trim
?filterAndTrim
out = filterAndTrim(fnFs, filtFs, fnRs, filtRs,
truncLen=c(result_row$R1Trim,result_row$R2Trim),
maxN=0,
maxEE=c(result_row$R1EE,result_row$R2EE), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=cores, matchIDs=TRUE,verbose = TRUE)
result_row$R1Trim
result_row$R2Trim
result_row$R1EE
result_row$R2EE
out = filterAndTrim(fnFs, filtFs, fnRs, filtRs,
truncLen=c(245,227),
maxN=0,
maxEE=c(2,4), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=cores, matchIDs=TRUE,verbose = TRUE)
out = filterAndTrim(fnFs, filtFs, fnRs, filtRs,
truncLen=c(250,250),
maxN=0,
maxEE=c(2,4), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=cores, matchIDs=TRUE,verbose = TRUE)
out = filterAndTrim(fnFs, filtFs, fnRs, filtRs,
truncLen=c(250,250),
maxN=0,
maxEE=c(4,4), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=cores, matchIDs=TRUE,verbose = TRUE)
out = filterAndTrim(fnFs, filtFs, fnRs, filtRs,
truncLen=c(270,270),
maxN=0,
maxEE=c(4,4), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=cores, matchIDs=TRUE,verbose = TRUE)
out = filterAndTrim(fnFs, filtFs, fnRs, filtRs,
truncLen=c(270,270),
maxN=0,
maxEE=c(10,10), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=cores, matchIDs=TRUE,verbose = TRUE)
View(result_row)
out = filterAndTrim(fnFs, filtFs, fnRs, filtRs,
truncLen=c(270,270),
maxN=0,
truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=cores, matchIDs=TRUE,verbose = TRUE)
out = filterAndTrim(fnFs, filtFs, fnRs, filtRs,
maxN=0,
truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=cores, matchIDs=TRUE,verbose = TRUE)
fnFs
out = filterAndTrim(fnFs, filtFs, fnRs, filtRs,
truncLen=c(245,227),
maxN=0,
maxEE=c(2,4), truncQ=2, rm.phix=TRUE,
compress=TRUE, multithread=cores,verbose = TRUE)
